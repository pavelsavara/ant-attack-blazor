@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using Ant

<h1>Ant Attack again</h1>


@if (map == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <img @onkeydown="@KeyDown" @ref="_targetImage" tabindex="0" width="800" height="600" />
}

@code {
    private Map map;
    private View view;
    private ElementReference _targetImage;
    private int x = 0;
    private int y = 0;

    private bool running = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            map = new Map();
            view = new View(800, 600, map);
            await JS.InvokeVoidAsync("setFocusToElement", _targetImage);
            await JS.InvokeVoidAsync("log", "first");
            await Render();
        }
    }

    private async Task Render()
    {
        if (!running)
        {
            running = true;
            await JS.InvokeVoidAsync("setSrc", _targetImage, view.DataUrl(x, y));
            running = false;
        }
    }

    private async Task KeyDown(KeyboardEventArgs args)
    {
        await JS.InvokeVoidAsync("log", $"do {args.Key}");
        switch (args.Key)
        {
            case "ArrowUp":
                y--;
                await Render();
                break;
            case "ArrowDown":
                y++;
                await Render();
                break;
            case "ArrowLeft":
                x--;
                await Render();
                break;
            case "ArrowRight":
                x++;
                await Render();
                break;
        }
        await JS.InvokeVoidAsync("log", $"moved {args.Key}");
    }
}