@* Pavel Savara 2007 *@
@* http://zamboch.blogspot.com/ *@
@* Licensed under LGPL *@

@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using Ant

<h1>Ant Attack again</h1>

@if (map == null)
{
    <p><em>Loading...</em></p>
}
else
{
}

<img @onkeydown="@KeyDown" @ref="_targetImage" tabindex="0" width="800" height="600" />

<br />
<br />
<a href="https://github.com/pavelsavara/ant-attack-blazor">Fork me</a>

@code {
    private Map map;
    private View view;
    private ElementReference _targetImage;
    private int x = 0;
    private int y = 0;

    private bool running = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            map = new Map();
            view = new View(800, 600, map);
            await JS.InvokeVoidAsync("setFocusToElement", _targetImage);
            await JS.InvokeVoidAsync("log", "first");
            Render();
        }
    }

    private void Render()
    {
        if (!running)
        {
            running = true;
            Task.Run(async () =>
            {
                var cx = int.MinValue;
                var cy = int.MinValue;
                while (cx != x && cy != y)
                {
                    cx = x;
                    cy = y;

                    var now = DateTime.Now;
                    await JS.InvokeVoidAsync("log", $"start {now }");
                    var data = view.DataUrl(cx, cy);
                    await JS.InvokeVoidAsync("log", $"data {DateTime.Now-now}");
                    await JS.InvokeVoidAsync("setSrc", _targetImage, data);
                    await JS.InvokeVoidAsync("log", $"end {DateTime.Now-now}");
                    await Task.Delay(1);
                }
                running = false;
            });
        }
    }

    private async Task KeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowUp":
                y++;
                Render();
                break;
            case "ArrowDown":
                y--;
                Render();
                break;
            case "ArrowLeft":
                x++;
                Render();
                break;
            case "ArrowRight":
                x--;
                Render();
                break;
        }
        await JS.InvokeVoidAsync("log", $"moved {args.Key}");
    }
}